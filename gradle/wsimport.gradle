configurations { jaxws }

dependencies {
	// Needed for wsimport Ant task
	// see https://jax-ws.java.net/2.2.8/docs/ch04.html#tools-wsimport-ant-task
	jaxws 'com.sun.xml.ws:jaxws-rt:2.2.8'
	jaxws 'com.sun.xml.ws:jaxws-tools:2.2.8'
}

class GenerateFromWSDL extends DefaultTask {

	def authFile = project.file('wsimportAuth')
	def packageName = 'com.rapidminer.wsimport'
	def wsdlFile = null
	def srcDir = 'src/generated/java/'

	@TaskAction
	public doWork() {
		// ensure src dir available
		project.file(srcDir).mkdirs()
		assert wsdlFile
		
		// ensure JavaDoc is in english
		System.properties['user.language'] = 'en'
		System.properties['user.country'] = 'EN'
		System.properties['javax.xml.accessExternalSchema'] = 'file'
		Locale.setDefault(Locale.UK)
		
		def jaxwsClasspath =  project.configurations.jaxws.asPath
		project.ant {
			
			taskdef(name:'wsimport', classname:'com.sun.tools.ws.ant.WsImport', classpath: jaxwsClasspath)
			wsimport(
					wsdl: wsdlFile,
					sourcedestdir: srcDir,
					package: packageName,
					keep: true,
					extension: true,
					xadditionalHeaders: true,
					xnocompile: true,
					xdebug: true,
					xauthfile: authFile
			)
		}
	}

}

task wsimportRepositoryService(type: GenerateFromWSDL) {
	wsdlFile 'http://localhost:8080/RAWS/RepositoryService?wsdl'
	packageName 'com.rapid_i.repository.wsimport'
}

task wsimportProcessService(type: GenerateFromWSDL) {
	wsdlFile 'http://localhost:8080/RAWS/ProcessService?wsdl'
	packageName 'com.rapid_i.repository.wsimport'
}

task wsimportManagementService(type: GenerateFromWSDL) {
	wsdlFile 'http://localhost:8080/RAWS/ManagementService?wsdl'
	packageName 'com.rapid_i.repository.wsimport.mgt'
}

task wsimportProcessService_1_3(type: GenerateFromWSDL) {
	wsdlFile 'http://localhost:8080/RAWS/ProcessService_1_3?wsdl'
	packageName 'com.rapid_i.repository.wsimport'
}

task wsimportRAInfoService(type: GenerateFromWSDL) {
	wsdlFile 'http://localhost:8080/RAWS/RAInfoService?wsdl'
	packageName 'com.rapid_i.repository.wsimport'
}

task wsimport {
	dependsOn tasks.findAll { Task t -> t.name.startsWith('wsimport') && t.name != 'wsimport' }
}